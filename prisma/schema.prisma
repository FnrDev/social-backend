// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id             String         @id @default(uuid())
  username       String         @unique
  name           String?
  email          String         @unique
  phone_number   String         @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  avatar         String?
  Session        Session[]
  posts          Post[]
  comments       Comments[]
  media          Media[]
  likes          PostLikes[]
  comments_likes CommentLikes[]

  @@map(name: "users")
}

model Session {
  id         String   @id @db.VarChar(250)
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  last_visit DateTime @default(now())

  @@map(name: "sessions")
}

model Post {
  id          String      @id
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  description String      @db.VarChar(255)
  likes       PostLikes[]
  createdAt   DateTime    @default(now())
  commnets    Comments[]

  @@map(name: "posts")
}

model Comments {
  id        String         @id @default(uuid())
  postId    String
  post      Post           @relation(fields: [postId], references: [id])
  userId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String         @db.VarChar(255)
  likes     CommentLikes[]
  createdAt DateTime       @default(now())

  @@map(name: "comments")
}

model PostLikes {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map(name: "likes")
}

model CommentLikes {
  id        String   @id @default(uuid())
  commentId String
  comment   Comments @relation(fields: [commentId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map(name: "comments_likes")
}

model Media {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map(name: "media")
}
